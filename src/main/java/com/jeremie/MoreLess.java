package com.jeremie;


public class MoreLess extends BaseGame {
    private boolean find;
    private boolean[] equal;
    private boolean[] more;
    private boolean[] less;

    /**
     * @param nbSize  size of the combination.
     * @param nbTry   maximum try/turn to find combination.
     * @param devMode enable display combination when the game at started in dev mode.
     */
    public MoreLess(int nbSize, int nbTry, boolean devMode) {
        super(nbSize, nbTry, devMode);
        this.find = false;
        this.equal = new boolean[nbSize];
        this.more = new boolean[nbSize];
        this.less = new boolean[nbSize];
    }

    /**
     * Calculation of a random number.
     *
     * @return the random number.
     */
    public void combinationRandom() {
        int bMin = (int) Math.pow(10, nbSize - 1);
        int bMax = (int) Math.pow(10, nbSize);
        randomNumber = (int) (Math.random() * (bMax - bMin)) + bMin;
    }

    /**
     * Start challenge mode, The user propose a secret combination that the computer have to find.
     */
    @Override
    public void challengeMode() {
        this.combinationRandom();
        combination = String.valueOf(randomNumber);
        displaySolutionForDev(combination); // if mode dev then display solution
        do {
            displayProposal(GameMode.CHALLENGE, PlayerType.HUMAN, 0, null);
            this.compareAndDisplayIndicatorsPlacement(myAnswer, combination);
            nbTry--;
            find = result(combination, myAnswer, null, PlayerType.HUMAN, GameMode.CHALLENGE);
        } while (!find && nbTry != 0);
    }

    /**
     * Start defense mode. The computer have to search a random combination generated by you.
     */
    @Override
    public void defenseMode() {
        choiceCombinationToComputer(GameMode.DEFENSE);
        this.combinationRandom();
        computerAnswer = String.valueOf(randomNumber);
        while (!find && essay <= nbTry) {
            displayProposal(GameMode.DEFENSE, PlayerType.COMPUTER, 0, computerAnswer);
            this.compareAndDisplayIndicatorsPlacement(computerAnswer, myCombinationThatComputerFind);
            find = result(myCombinationThatComputerFind, computerAnswer, null, PlayerType.COMPUTER, GameMode.DEFENSE);
            this.comparePlacement(computerAnswer, myCombinationThatComputerFind);
            computerAnswer = this.computerReflexion(equal, more, less, myCombinationThatComputerFind);
            essay++;
        }
    }

    /**
     * Start duel mode. Switch between user and computer to search a random combination.
     */
    @Override
    public void duelMode() {
        int nombre = 0;
        this.combinationRandom();
        combination = String.valueOf(randomNumber);
        choiceCombinationToComputer(GameMode.DUAL);
        this.combinationRandom();
        computerAnswer = String.valueOf(randomNumber);
        displaySolutionForDev(combination);
        do {
            if (nombre % 2 == 0) {
                displayProposal(GameMode.DUAL, PlayerType.HUMAN, counter1, null);
                counter1++;
                this.compareAndDisplayIndicatorsPlacement(myAnswer, combination);
                find = result(combination, myAnswer, myCombinationThatComputerFind, PlayerType.HUMAN, GameMode.DUAL);
            } else {
                displayProposal(GameMode.DUAL, PlayerType.COMPUTER, counter2, computerAnswer);
                counter2++;
                this.compareAndDisplayIndicatorsPlacement(computerAnswer, myCombinationThatComputerFind);
                find = result(myCombinationThatComputerFind, computerAnswer, combination, PlayerType.COMPUTER, GameMode.DUAL);
                this.comparePlacement(computerAnswer, myCombinationThatComputerFind);
                computerAnswer = this.computerReflexion(equal, more, less, myCombinationThatComputerFind);
            }
            nombre++;
        } while (!find);
    }

    /**
     * Comparison between answer and combination.
     *
     * @param answer      your answer or computer answer.
     * @param combination secret combination.
     */
    private void compareAndDisplayIndicatorsPlacement(String answer, String combination) {
        for (int i = 0; i < answer.length(); i++) {
            if (answer.charAt(i) == combination.charAt(i)) {
                System.out.print("=");
            } else if (answer.charAt(i) < combination.charAt(i)) {
                System.out.print("+");
            } else if (answer.charAt(i) > combination.charAt(i)) {
                System.out.print("-");
            }
        }
        System.out.println("\n");
    }

    /**
     * Comparison between answer and combination.
     *
     * @param answer      your answer or computer answer.
     * @param combination secret combination.
     */
    private void comparePlacement(String answer, String combination) {
        for (int i = 0; i < answer.length(); i++) {
            if (answer.charAt(i) == combination.charAt(i)) {
                equal[i] = true;
            } else if (answer.charAt(i) < combination.charAt(i)) {
                more[i] = true;
            } else if (answer.charAt(i) > combination.charAt(i)) {
                less[i] = true;
            }
        }
    }

    /**
     * The computer is thinking about proposing an answer based on the indicators.
     *
     * @param equal Array which catch with a boolean equal values between combination and answer
     * @param more  Array which catch with a boolean for greater number values between combination and answer
     * @param less  Array which catch with a boolean for smaller number values between combination and answer
     */

    private String computerReflexion(boolean[] equal, boolean[] more, boolean[] less, String yourResponseThatOrdiFind) {
        char[] computerAnswers = new char[nbSize];
        String answer = "";
        for (int index = 0; index < nbSize; index++) {
            computerAnswers[index] = computerAnswer.charAt(index);
        }
        for (int index = 0; index < nbSize; index++) {
            int entier = 0;
            int newEntier = 0;
            if (equal[index] == true) {
                computerAnswers[index] = yourResponseThatOrdiFind.charAt(index);
            } else if (more[index] == true) {
                entier = Character.getNumericValue(computerAnswer.charAt(index));
                newEntier = entier + 1;
                computerAnswers[index] = Character.forDigit(newEntier, 10);
            } else if (less[index] == true) {
                entier = Character.getNumericValue(computerAnswer.charAt(index));
                newEntier = entier - 1;
                computerAnswers[index] = Character.forDigit(newEntier, 10);
            }
            answer += computerAnswers[index];
        }
        return answer;
    }

    @Override
    protected boolean testMyAnswer(String answer) {
        boolean answerCorrect = true;
        if (!answer.matches("^\\d{" + nbSize + "}$")) {
            System.out.println("Ce n'est pas bon, la taille ou le format n'est pas bon.");
            System.out.println("Merci de saisir un nombre Ã  " + nbSize + " chiffres : ");
            answerCorrect = false;
        }
        return answerCorrect;
    }
}

