package com.jeremie;

public class PlusMoins extends BaseGame {


    private boolean find;
    private boolean[] equal;
    private boolean[] more;
    private boolean[] less;

    /**
     * @param nbCases size of the combination.
     * @param nbTry maximum try/turn to find combination.
     * @param devMode enable display combination when the game at started in dev mode.
     */
    public PlusMoins(int nbCases, int nbTry, boolean devMode) {
        super(nbCases, nbTry, devMode);
        this.find = false;
        this.equal = new boolean[nbCases];
        this.more = new boolean[nbCases];
        this.less = new boolean[nbCases];
    }

    /**
     * Calculation of a random number.
     * @return the random number.
     */
    private int randomNumberAndSelectedNumber() { //revoir cette méthode
        int bMin = (int) Math.pow(10, nbCases - 1);
        int bMax = (int) Math.pow(10, nbCases);
        int randomNumber = (int) (Math.random() * (bMax - bMin)) + bMin;
        return randomNumber;
    }


    /**
     *
     * @param yourAnswer
     * @param computerAnswer
     */
    /*
    private void randomNumbers(String yourAnswer, String ordiAnswer) { //revoir cette méthode
        for(int index = 0 ; index < nbCases; index++) {
            int bMin = Character.getNumericValue(ordiAnswer.charAt(index));
            int bMax = Character.getNumericValue(yourAnswer.charAt(index));
            int randomNumber = (int) (Math.random() * (bMax - bMin)) + bMin;
            System.out.println(randomNumber);
        }
    }*/

    /**
     * Start challenge mode, The user propose a secret combination that the computer have to find.
     */
    @Override
    public void challengeMode() {
        String combination;
        combination = String.valueOf(randomNumberAndSelectedNumber());
        displaySolutionForDev(combination); // if mode dev then display solution
        do {
            proposition(0, combination);
            compareAndDisplayIndicatorsPlacement(myAnswer, combination);
            System.out.println("\n");
            result(combination);
        } while (!find && nbTry != 0);
    }

    /**
     * Start defense mode. The computer have to search a random combination generated by you.
     */
    @Override
    public void defenseMode() {
        String yourResponseThatOrdiFind;
        String computerAnswer;
        int tentative = 1;
        System.out.print("Merci de choisir le nombre à 4 chiffres que l'ordinateur doit trouver : ");
        yourResponseThatOrdiFind = sc.nextLine();
        System.out.println("L'ordinateur doit retrouver la réponse suivante : " + yourResponseThatOrdiFind);
        computerAnswer = String.valueOf(randomNumberAndSelectedNumber());
        comparePlacement(computerAnswer, yourResponseThatOrdiFind);
        System.out.print("Proposition " + tentative + " : " + computerAnswer + " vérification des placements : ");
        while(!find && tentative <= nbTry){
            computerAnswer = computerReflexion(equal, more, less, yourResponseThatOrdiFind, computerAnswer);
            System.out.print("Proposition " + (tentative+1) + " : " + computerAnswer + " vérification des placements : ");
            compareAndDisplayIndicatorsPlacement(computerAnswer, yourResponseThatOrdiFind);
            comparePlacement(computerAnswer, yourResponseThatOrdiFind);
            System.out.println();
            if (computerAnswer.contains(yourResponseThatOrdiFind)) {
                find = true;
                System.out.print("\n" + "L'ordi a trouvé la bonne combinaison : " + computerAnswer);
            }
            tentative++;
        }
        if(!find)
            System.out.print("\n" + "L'ordi n'a pas trouvé la bonne combinaison, qui est : " + yourResponseThatOrdiFind);
    }

    /**
     * Start duel mode. Switch between user and computer to search a random combination.
     */
    @Override
    public void duelMode() {
        int nombre = 0;
        int tentative = 1;
        String randomNumberAtFind;
        String myAnswer;
        String computerAnswer;

        randomNumberAtFind = String.valueOf(randomNumberAndSelectedNumber());
        computerAnswer = String.valueOf(randomNumberAndSelectedNumber());
        displaySolutionForDev(randomNumberAtFind);
        do {
            if (nombre % 2 == 0) {
                System.out.print("C'est à votre tour : ");
                myAnswer = sc.nextLine();
                System.out.print("Votre proposition : " + myAnswer + " -> réponse : ");
                compareAndDisplayIndicatorsPlacement(myAnswer, randomNumberAtFind);
                if (myAnswer.contains(randomNumberAtFind)) {
                    find = true;
                    System.out.print("\n" + "Bravo vous avez trouvé la bonne combinaison : " + myAnswer);
                }
            } else {
                System.out.println("C'est au tour de l'ordinateur ! ");
                if(tentative == 1) {
                    System.out.print("L'ordinateur propose : " + computerAnswer + " -> réponse : ");
                    compareAndDisplayIndicatorsPlacement(computerAnswer, randomNumberAtFind);
                }
                comparePlacement(computerAnswer, randomNumberAtFind);
                computerAnswer = computerReflexion(equal, more, less, randomNumberAtFind, computerAnswer);
                if(tentative > 1){
                    System.out.print("L'ordinateur propose : " + computerAnswer + " -> réponse : ");
                    compareAndDisplayIndicatorsPlacement(computerAnswer, randomNumberAtFind);
                }
                if (computerAnswer.contains(randomNumberAtFind)) {
                    find = true;
                    System.out.print("\n" + "C'est l'ordi qui a trouvé la bonne combinaison : " + computerAnswer);
                }
                tentative++;
            }
            nombre++;
            System.out.println("\n");
        } while (!find);
    }


    /**
     * Comparison between answer and combination.
     * @param answer your answer or computer answer.
     * @param combination secret combination.
     */
    private void compareAndDisplayIndicatorsPlacement(String answer, String combination) {
        for (int i = 0; i < answer.length(); i++) {
            if (answer.charAt(i) == combination.charAt(i)) {
                System.out.print("=");
            } else if (answer.charAt(i) < combination.charAt(i)) {
                System.out.print("+");
            } else if (answer.charAt(i) > combination.charAt(i)) {
                System.out.print("-");
            }
        }
    }

    /**
     * Comparison between answer and combination.
     * @param answer your answer or computer answer.
     * @param combination secret combination.
     */
    private void comparePlacement(String answer, String combination) {
        for (int i = 0; i < answer.length(); i++) {
            if (answer.charAt(i) == combination.charAt(i)) {
                equal[i] = true;
            } else if (answer.charAt(i) < combination.charAt(i)) {
                more[i] = true;
            } else if (answer.charAt(i) > combination.charAt(i)) {
                less[i] = true;
            }
        }
    }


    /**
     * The computer is thinking about proposing an answer based on the indicators/
     * @param equal Array which catch with a boolean equal values between combination and answer
     * @param more  Array which catch with a boolean for greater number values between combination and answer
     * @param less  Array which catch with a boolean for smaller number values between combination and answer
     */

    public String computerReflexion(boolean[] equal, boolean[] more, boolean[] less, String yourResponseThatOrdiFind, String computerAnswer){
        char[] computerAnswers = new char[nbCases];
        String answer = "";
        for(int index = 0; index < nbCases; index++){
            computerAnswers[index] = computerAnswer.charAt(index);
        }
        for(int index = 0; index < nbCases; index++){
            int entier = 0;
            int newEntier = 0;
            if(equal[index] == true){
                computerAnswers[index] = yourResponseThatOrdiFind.charAt(index);
            }
            else if(more[index] == true){
                entier = Character.getNumericValue(computerAnswer.charAt(index));
                newEntier = entier + 1;
                computerAnswers[index] = Character.forDigit(newEntier,10);
            }
            else if(less[index] == true){
                entier = Character.getNumericValue(computerAnswer.charAt(index));
                newEntier = entier - 1;
                computerAnswers[index] = Character.forDigit(newEntier,10);
            }
            answer += computerAnswers[index];
        }
        return answer;
    }
}

