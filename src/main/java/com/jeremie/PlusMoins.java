package com.jeremie;

public class PlusMoins extends BaseGame {


    private boolean find;
    private boolean[] equal;
    private boolean[] more;
    private boolean[] less;

    /**
     * @param nbCases size of the combination.
     * @param nbTry maximum try/turn to find combination.
     * @param devMode enable display combination when the game at started in dev mode.
     */
    public PlusMoins(int nbCases, int nbTry, boolean devMode) {
        super(nbCases, nbTry, devMode);
        this.find = false;
        this.equal = new boolean[nbCases];
        this.more = new boolean[nbCases];
        this.less = new boolean[nbCases];
    }


    /**
     * Start challenge mode, The user propose a secret combination that the computer have to find.
     */
    @Override
    public void challengeMode() {
        combinationRandom("moreLess", 1);
        displaySolutionForDev(combination); // if mode dev then display solution
        do {
            proposition("human", combination, "challenge");
            compareAndDisplayIndicatorsPlacement(myAnswer, combination);
            System.out.println();
            find = result(combination, myAnswer,"human");
            nbTry--;
        } while (!find && nbTry != 0);
    }

    /**
     * Start defense mode. The computer have to search a random combination generated by you.
     */
    @Override
    public void defenseMode() {
        choiceCombinationToComputer();
        combinationRandom("moreLess", 2); //génère nouvelle combinaison
        computerAnswer = String.valueOf(combination);
        while(!find && tentative <= nbTry) {
            proposition("computer", computerAnswer, "defense");
            compareAndDisplayIndicatorsPlacement(computerAnswer, myCombinationThatComputerFind);
            find = result(myCombinationThatComputerFind, computerAnswer,"computer");
            comparePlacement(computerAnswer, myCombinationThatComputerFind);
            computerAnswer = computerReflexion(equal, more, less, myCombinationThatComputerFind, computerAnswer);
            tentative++;
        }
    }

    /**
     * Start duel mode. Switch between user and computer to search a random combination.
     */
    @Override
    public void duelMode() {
        int nombre = 0;
        combination = String.valueOf(combination);
        combinationRandom("moreLess", 3);
        computerAnswer = String.valueOf(computerAnswer);
        displaySolutionForDev(combination);
        do {
            if (nombre % 2 == 0) {
                proposition("human", null, "dual");
                compareAndDisplayIndicatorsPlacement(myAnswer, combination);
                find = result(combination, myAnswer, "human");
            } else {
                proposition("computer", computerAnswer, "dual");
                compareAndDisplayIndicatorsPlacement(computerAnswer, combination);
                find = result(combination, computerAnswer,"computer");
                comparePlacement(computerAnswer, combination);
                computerAnswer = computerReflexion(equal, more, less, combination, computerAnswer);
                tentative++;
            }
            nombre++;
            System.out.println("");
        } while (!find);
    }

    /**
     * Comparison between answer and combination.
     * @param answer your answer or computer answer.
     * @param combination secret combination.
     */
    private void compareAndDisplayIndicatorsPlacement(String answer, String combination) {
        for (int i = 0; i < answer.length(); i++) {
            if (answer.charAt(i) == combination.charAt(i)) {
                System.out.print("=");
            } else if (answer.charAt(i) < combination.charAt(i)) {
                System.out.print("+");
            } else if (answer.charAt(i) > combination.charAt(i)) {
                System.out.print("-");
            }
        }
        System.out.println();
    }

    /**
     * Comparison between answer and combination.
     * @param answer your answer or computer answer.
     * @param combination secret combination.
     */
    private void comparePlacement(String answer, String combination) {
        for (int i = 0; i < answer.length(); i++) {
            if (answer.charAt(i) == combination.charAt(i)) {
                equal[i] = true;
            } else if (answer.charAt(i) < combination.charAt(i)) {
                more[i] = true;
            } else if (answer.charAt(i) > combination.charAt(i)) {
                less[i] = true;
            }
        }
    }

    /**
     * The computer is thinking about proposing an answer based on the indicators/
     * @param equal Array which catch with a boolean equal values between combination and answer
     * @param more  Array which catch with a boolean for greater number values between combination and answer
     * @param less  Array which catch with a boolean for smaller number values between combination and answer
     */

    public String computerReflexion(boolean[] equal, boolean[] more, boolean[] less, String yourResponseThatOrdiFind, String computerAnswer){
        char[] computerAnswers = new char[nbCases];
        String answer = "";
        for(int index = 0; index < nbCases; index++){
            computerAnswers[index] = computerAnswer.charAt(index);
        }
        for(int index = 0; index < nbCases; index++){
            int entier = 0;
            int newEntier = 0;
            if(equal[index] == true){
                computerAnswers[index] = yourResponseThatOrdiFind.charAt(index);
            }
            else if(more[index] == true){
                entier = Character.getNumericValue(computerAnswer.charAt(index));
                newEntier = entier + 1;
                computerAnswers[index] = Character.forDigit(newEntier,10);
            }
            else if(less[index] == true){
                entier = Character.getNumericValue(computerAnswer.charAt(index));
                newEntier = entier - 1;
                computerAnswers[index] = Character.forDigit(newEntier,10);
            }
            answer += computerAnswers[index];
        }
        return answer;
    }
}

